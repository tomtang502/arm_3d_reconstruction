import sys, os, pickle, torch, yaml
import utils.chessboard as chessboard

import utils.geometric_util as geomu
from utils.graph_util import plotty_graph_multistruct, graph_double_struct
from utils.dust3r_run import load_pose_from_exp_name
from utils.scale_calib import *

import numpy as np
from configs.experiments_data_config import ArmDustrExpData

exp_config = ArmDustrExpData()
exp_name = "7obj_divangs"

### Load arm end-effectors, camera poses, and point cloud (the last two are generated by dust3r)
pose_data = exp_config.get_obs_config(exp_name)

eef_poses_all = pose_data.poses

eef_poses = [eef_poses_all[i] for i in range(len(eef_poses_all)) if i not in pose_data.test_pt]
eef_poses_tor=geomu.pose_to_transform(torch.tensor(eef_poses))
linear_idx_x, add_pts, x_d = pose_data.linearidx['x'] 

curshift = 0
linear_idx_x_converted = []
add_pts_converted = []
for i in range(len(eef_poses_all)):
    if i in linear_idx_x:
        linear_idx_x_converted.append(i + curshift)
    if i in add_pts:
        add_pts_converted.append(i + curshift)
    if i in pose_data.test_pt:
        curshift -= 1



im_poses_tor_o, ptc_tor_o = load_pose_from_exp_name(exp_name)

xyz = np.stack(geomu.tmatw2c_to_xyz(im_poses_tor_o))
xyz_eef = np.stack(geomu.tmatw2c_to_xyz(eef_poses_tor))
graph_double_struct(xyz, xyz_eef)
assert eef_poses_tor.shape == im_poses_tor_o.shape, "Number of eef != Number of cam poses!"

### Solving for scale and then do caliberation
im_poses_tor_o, ptc_tor_o = rescale_pose_ptc(im_poses_tor_o, ptc_tor_o, linear_idx_x_converted, x_d)
eef_poses_tor_calib, im_poses_tor_o_calib = filter_out_calib_poses(eef_poses_tor, im_poses_tor_o, 
                                                                 add_pts_converted)
T = caculate_calib_trans_mat(eef_poses_tor_calib, im_poses_tor_o_calib)
im_poses_tor, ptc_tor = transpose_poses_ptc(im_poses_tor_o, ptc_tor_o, T)




# Visualize constructed ptc
pts_tor_n = ptc_tor[::100]
cam_pos_n=im_poses_tor[:,:3,3]
eff_poses_n=eef_poses_tor[:,:3,3]
plotty_graph_multistruct([eff_poses_n, cam_pos_n, pts_tor_n], 
                         ["arm end-effector", "camera pose", "point cloud"],
                         [5, 5, 0.3])
