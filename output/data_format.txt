output/colmap_saved_output
tensors_to_save = {
    'poses': colmap_pose,
    'dense_pt': colmap_ptc,
    'eef_poses': eef_nontest,
    'T' : T,
    'J' : torch.tensor(J),
    'trans_L' : torch.tensor(t_L),
    'rot_L' : torch.tensor(R_L)
}

output/dust3r_saved_output
raw dust3r output
tensors_to_save = {
        'poses': poses,
        'pts': pts_tor,
        'rgb_colors': rgb_colors,
        'loc_info' : pt_loc_tor, # row, col, img_idx
        'images': imgs_tor, 
        'masks': masks_tor,
}

scale caliberated
tensors_to_save = {
        'poses': dust3r_pose,
        'dense_pt': dust3r_ptc,
        'colors': rgb_colors,
        'pt_loc' : loc_info, # row, col, img_idx
        'eef_poses': eef_nontest,
        'T' : T,
        'eef_idx': eef_nontest_idx,
        'J' : torch.tensor(J),
        'trans_L' : torch.tensor(t_L),
        'rot_L' : torch.tensor(R_L)
}

tinysam segmanted images
tensors = {
    'pix_cla': torch.tensor(pixel_map), # w*h, each location is corresponding class
    'viz': torch.tensor(pixel_viz) # some preassigned colors
}

dust3r segmented output
tensors_to_save = {
        'poses': dust3r_pose,
        'dense_pt': dust3r_ptc,
        'pt_class': pts_class,
        'colors': rgb_colors,
        'pt_loc' : loc_info, # row, col, img_idx
        'eef_poses': eef_nontest,
        'T' : T,
        'eef_idx': eef_nontest_idx,
        'J' : torch.tensor(J),
        'trans_L' : torch.tensor(t_L),
        'rot_L' : torch.tensor(R_L)
}

https://drive.google.com/drive/folders/1MXqcuhJHIx36VMiAnD2ZopHMVWjqZv0U?usp=sharing